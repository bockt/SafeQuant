names(pValues) = labels[2:length(labels)]
qValues = subset(df,select = grepl("qValue",names(df)) )
names(qValues) = labels[2:length(labels)]
#### background set
allMotifs = df$motifX %>% gsub("(\\*)|(\\,.*)","",.)
#allMotifs = allMotifs[nchar(allMotifs) == max(nchar(allMotifs), na.rm=T)]
# VEVNTNpSGEIIHK -> VEVNTNSGEIIHK
allMotifsFormatted =  gsub("(.{6})([STY].{6})",paste0("\\1","p","\\2"),allMotifs)
if(F){
pwmBg = pcm2pfm(getAAFreq(allMotifs))
kinaseFreqBg = getKinaseFreq(allMotifsFormatted)
motifFreqBg = getMotifFreq(allMotifsFormatted)
nbBgPeptides = length(allMotifsFormatted)
save(kinaseFreqBg,motifFreqBg,pwmBg,nbBgPeptides,file="~/dev/R/workspace/CristinaPhospho/data/motifsEtc/kinaseMotifFreqBg.RData")
}
load("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/kinaseMotifFreqBg.RData")
qValueCutoff = 0.05
minFreq = 0.1
pValueThrs = 0.05
maxTargetPeptides = 300
kinaseStats = kinaseStatsList[[lab]]
kinaseStatsUp = kinaseStats[c("kinase","motif","countBg","totBg","countUp","totUp","freqUp","freqBg","pValueUp")]
# strip up/down column label
names(kinaseStatsUp) %<>% gsub("(Up)|(Down)","",.)
names(kinaseStatsUp)
head(kinaseStats)
q1 = ggUpVolcano(kinaseStats[c("kinase","motif","countBg","totBg","countUp","totUp","freqUp","freqBg","pValueUp")]
,title=paste("kinase,",cond, "Up,", "n:", kinaseStats$totUp[1] ), minPvalue=pValueThrs, minFreq=minFreq)
q1 = ggUpVolcano(kinaseStats[c("kinase","motif","countBg","totBg","countUp","totUp","freqUp","freqBg","pValueUp")]
,title=paste("kinase,",cond, "Up,", "n:", kinaseStats$totUp[1] ), minPvalue=pValueThrs, minFreq=minFreq)
plot(q1)
q1 = ggUpVolcano(kinaseStats[c("kinase","motif","countBg","totBg","countUp","totUp","freqUp","freqBg","pValueUp")]
,title=paste("kinase,",cond, "Up,", "n:", kinaseStats$totUp[1] ), minPvalue=pValueThrs, minFreq=minFreq)
q2 = ggUpVolcano(motifStats[c("kinase","motif","countBg","totBg","countUp","totUp","freqUp","freqBg","pValueUp")]
,title=paste("motif,",cond, "Up,", "n:", motifStats$totUp[1]), minPvalue=pValueThrs, minFreq=minFreq)
plot(q1)
plot(q2)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(SafeQuant)
library(affy)
library(motifStack)
library(dplyr)
library(DiffLogo)
library(ggplot2)
library(ggrepel)
library(plotly)
library(knitr)
data("kinaseMotif")
source("~/dev/R/workspace/SafeQuant/R/Graphics.R")
source("~/dev/R/workspace/SafeQuant/R/IdentificationAnalysis.R")
############### methods ############################################################
ggUpVolcano = function(ggDf, title=title, minPvalue=0.05, minFreq=0.1){
# strip up/down column label
names(ggDf) %<>% gsub("(Up)|(Down)","",.)
# add pseudo count for display
pC = 0.5
ggDf$log2freqRatio = with(ggDf,log2((freq+pC)/(freqBg+pC)))
p =  ggplot(ggDf,aes(x = log2freqRatio,y=-log10(pValue)
,label=motif
,label2=pValue
,label4=count
,label3=kinase
,color=freq))
p = p + geom_point()
p = p + labs(list(x="log2 Freq Ratio", y="-log10 pValue", title=title ))
p = p + theme_bw()
p = p + scale_colour_gradient(low = "white", high="darkblue", name="matching freq")
p = p + theme(text = element_text(size=15)
, axis.text.x = element_text(angle=0, hjust=1)
, legend.position="right"
,legend.direction="vertical")
# pvalue thrs
p =  p + geom_abline(intercept = -log10(pValueThrs),slope=0, lty=2)
# thrs
#p =  p + geom_abline(intercept = 2,slope=0, lty=2)
# disp kinase or motif
dfLab = subset(ggDf, (pValue < minPvalue) & (freq > minFreq))
if(nrow(dfLab) > 0){
if(is.na(ggDf$motif[1])){
p = p + geom_text_repel(data= dfLab
,aes(x =log2freqRatio,y=-log10(pValue),label=kinase %>% gsub("(substrate)|(motif)|(kinase)","",.)  %>% gsub(" {2,}"," ",.)))
}else{
p = p + geom_text_repel(data=dfLab,aes(x = log2freqRatio, y=-log10(pValue),label=motif))
}
}
return(p)
}
getPropTestPValue = function(stats){
# calculate chi-sqaure p-values using protp.test
pValue =  lapply(1:nrow(stats),function(i){
c = stats[i,1:2] %>% unlist
totC = stats[1,3:4] %>% unlist
if(sum(c) == 0 ){
return(1)
}else{
suppressWarnings(return(prop.test(c , totC, alternative="less"  )$p.value))
}
}) %>% unlist
# adjust for multiple testing
#return(p.adjust(pValue, method="bonferroni"))
return(pValue)
}
getAAFreq = function(motif, targetResidues = c("S","T","Y") ){
# discard short motifs
nc = nchar(motif)
motif = motif[nc == max(nc,na.rm=T)]
motifMatrix = do.call(rbind, strsplit(motif,""))
motifMatrix = motifMatrix[motifMatrix[,round((nchar(motif[1])+1)/2)] %in% targetResidues,]
aas = c("A","C","D","E","F","G","H","I","K","L","M","N","P","Q","R","S","T","V","W","Y")
aaFreq =  data.frame()
for(pos in 1:ncol(motifMatrix)){
aaFreq = rbind(aaFreq,table(motifMatrix[,pos])[aas])
}
names(aaFreq) = aas
aaFreq[is.na(aaFreq)] = 0
aaFreq = t(aaFreq)
return(aaFreq)
}
############### methods ############################################################
### ex79 full
if(F){
df = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/ex79-PhosphoQuant.csv")
labels = c("Diploid", "Tetraploid", "Aneuploid-1", "Aneuploid-2", "Aneuploid-3", "Aneuploid-4")
resDir = "~/dev/R/workspace/CristinaPhospho/data/motifsEtc/out/exp79/full/"
}
### ex79 inclusion list
if(T){
inclusionList = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/InclusionList.csv")[,1]
df = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/ex79-PhosphoQuant.csv")
labels = c("Diploid", "Tetraploid", "Aneuploid-1", "Aneuploid-2", "Aneuploid-3", "Aneuploid-4")
resDir = "~/dev/R/workspace/CristinaPhospho/data/motifsEtc/out/exp79/inclusionList/"
# keep inclusion list only
df = subset(df, X %in% inclusionList)
}
### ex93 full
if(F){
df = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/exp93-PhosphoQuant.csv")
labels = c("Diploid", "Tetraploid", "Trisomic-1", "Trisomic-2")
resDir = "~/dev/R/workspace/CristinaPhospho/data/motifsEtc/out/exp93/full/"
}
### ex93 inclusion list
if(F){
inclusionList = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/InclusionList.csv")[,1]
df = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/exp93-PhosphoQuant.csv")
labels = c("Diploid", "Tetraploid", "Trisomic-1", "Trisomic-2")
resDir = "~/dev/R/workspace/CristinaPhospho/data/motifsEtc/out/exp93/inclusionList/"
# keep inclusion list only
df = subset(df, X %in% inclusionList)
}
# create index
rownames(df) = paste0(df$peptide,":",df$ptm %>% gsub(" ","",.) )
ratios = subset(df,select = grepl("ratio",names(df)) )
names(ratios) = labels[2:length(labels)]
pValues = subset(df,select = grepl("pValue",names(df)) )
names(pValues) = labels[2:length(labels)]
qValues = subset(df,select = grepl("qValue",names(df)) )
names(qValues) = labels[2:length(labels)]
#### background set
allMotifs = df$motifX %>% gsub("(\\*)|(\\,.*)","",.)
#allMotifs = allMotifs[nchar(allMotifs) == max(nchar(allMotifs), na.rm=T)]
# VEVNTNpSGEIIHK -> VEVNTNSGEIIHK
allMotifsFormatted =  gsub("(.{6})([STY].{6})",paste0("\\1","p","\\2"),allMotifs)
if(F){
pwmBg = pcm2pfm(getAAFreq(allMotifs))
kinaseFreqBg = getKinaseFreq(allMotifsFormatted)
motifFreqBg = getMotifFreq(allMotifsFormatted)
nbBgPeptides = length(allMotifsFormatted)
save(kinaseFreqBg,motifFreqBg,pwmBg,nbBgPeptides,file="~/dev/R/workspace/CristinaPhospho/data/motifsEtc/kinaseMotifFreqBg.RData")
}
load("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/kinaseMotifFreqBg.RData")
qValueCutoff = 0.05
minFreq = 0.1
pValueThrs = 0.05
maxTargetPeptides = 300
# kinaseFreqBg = summarise(group_by(getKinaseFreq(allMotifsFormatted),kinase ), count=sum(nbMatchesPerKinase) )
# kinaseFreqBg = cbind(kinaseFreqBg, freq =  kinaseFreqBg$count / sum(kinaseFreqBg$count))
# rownames(kinaseFreqBg) = kinaseFreqBg$kinase
kinaseStatsList = list()
motifStatsList = list()
motifsUpList = list()
motifsDownList = list()
plotlyWidgets <- htmltools::tagList()
for(cond in names(qValues)){
#top maxTargetPeptides, ordred by pValue
selUp = which((qValues[cond] < qValueCutoff) & (ratios[cond] > 0 ))
selUp = selUp[order(pValues[selUp,cond])][1:min(maxTargetPeptides,length(selUp))]
selDown = which((qValues[cond] < qValueCutoff) & (ratios[cond] < 0 ))
selDown = selDown[order(pValues[selDown,cond])][1:min(maxTargetPeptides,length(selDown))]
motifsUp = allMotifs[selUp]
motifsDown =  allMotifs[selDown]
motifsFormattedUp = allMotifsFormatted[selUp]
motifsFormattedDown = allMotifsFormatted[selDown]
kinaseFreqUp = getKinaseFreq(motifsFormattedUp)
motifFreqUp = getMotifFreq(motifsFormattedUp)
kinaseFreqDown = getKinaseFreq(motifsFormattedDown)
motifFreqDown = getMotifFreq(motifsFormattedDown)
# build motifStats df
motifStats = cbind(motifFreqBg
,totBg = nbBgPeptides
, countUp = motifFreqUp$nbMatchesPerMotif
,totUp = length(motifsFormattedUp)
, countDown = motifFreqDown$nbMatchesPerMotif
,totDown = length(motifsFormattedDown)
)
names(motifStats)[3] = "countBg"
motifStats$freqUp= motifStats$countUp/motifStats$totUp
motifStats$freqDown= motifStats$countDown/motifStats$totDown
motifStats$freqBg= motifStats$countBg/motifStats$totBg
motifStats =cbind(
motifStats
,pValueUp=getPropTestPValue(motifStats[,c("countBg","countUp","totBg","totUp")])
,pValueDown=getPropTestPValue(motifStats[,c("countBg","countDown","totBg","totDown")])
)
# build kinaseStats df
allKinases = unique(kinaseMotif$kinase)
kinaseStats =data.frame( kinaseFreqBg[ match(allKinases, names(kinaseFreqBg) ) ] %>%unlist %>% as.vector
,kinaseFreqUp[ match(allKinases, names(kinaseFreqUp) ) ] %>%unlist %>% as.vector
,kinaseFreqDown[ match(allKinases, names(kinaseFreqDown) ) ] %>%unlist %>% as.vector
)
rownames(kinaseStats) = allKinases
names(kinaseStats) = c("countBg","countUp","countDown")
kinaseStats$totBg = nbBgPeptides
kinaseStats$totUp = length(motifsFormattedUp)
kinaseStats$totDown = length(motifsFormattedDown)
kinaseStats$freqUp= kinaseStats$countUp/kinaseStats$totUp
kinaseStats$freqDown= kinaseStats$countDown/kinaseStats$totDown
kinaseStats$freqBg= kinaseStats$countBg/kinaseStats$totBg
kinaseStats[is.na(kinaseStats)] = 0
kinaseStats =cbind(
kinaseStats
,pValueUp=getPropTestPValue(kinaseStats[,c("countBg","countUp","totBg","totUp")])
,pValueDown=getPropTestPValue(kinaseStats[,c("countBg","countDown","totBg","totDown")])
)
kinaseStats$kinase = allKinases
kinaseStats$motif = NA
# store kinase and motif stats
kinaseStatsList[[cond]] = kinaseStats
motifStatsList[[cond]] = motifStats
# store interactive plot
plotlyWidgets[[paste0(cond,"kinaseUp")]] = suppressWarnings(as.widget( ggplotly(q1)))
plotlyWidgets[[paste0(cond,"motifUp")]] = suppressWarnings(as.widget( ggplotly(q2)))
# store motifs
motifsUpList[[cond]] = motifsUp
motifsDownList[[cond]] = motifsDown
### XLS export
outKinaseStats = cbind(kinase= rownames(kinaseStats)
, kinaseStats
)
write.table(outKinaseStats ,paste0(resDir,cond,"_kinaseStats.xls"), row.names=F, sep="\t")
write.table(motifStats ,paste0(resDir,cond,"_motifStats.xls"), row.names=F, sep="\t")
}
for(lab in names(kinaseStatsList) ){
kinaseStats = kinaseStatsList[[lab]]
kinaseStatsUp = kinaseStats[c("kinase","motif","countBg","totBg","countUp","totUp","freqUp","freqBg","pValueUp")]
# strip up/down column label
names(kinaseStatsUp) %<>% gsub("(Up)|(Down)","",.)
kinaseStatsUp = subset(kinaseStatsUp, (pValue <= pValueThrs) & freq <= minFreq )
motifStats = motifStatsList[[lab]]
# UP
# disp table of significant hits
cat(paste("###",cond, "Up"))
cat('\n')
print(kable(kinaseStatsUp,row.names = F, digits = 3, caption = paste("kinase,",cond, "Up,")))
cat('\n')
cat('<a href="#top">Go to top</a>\n')
# DOWN
}
for(cond in names(kinaseStatsList) ){
kinaseStats = kinaseStatsList[[cond]]
motifStats = motifStatsList[[cond]]
# UP
q1 = ggUpVolcano(kinaseStats[c("kinase","motif","countBg","totBg","countUp","totUp","freqUp","freqBg","pValueUp")]
,title=paste("kinase,",cond, "Up,", "n:", kinaseStats$totUp[1] ), minPvalue=pValueThrs, minFreq=minFreq)
q2 = ggUpVolcano(motifStats[c("kinase","motif","countBg","totBg","countUp","totUp","freqUp","freqBg","pValueUp")]
,title=paste("motif,",cond, "Up,", "n:", motifStats$totUp[1]), minPvalue=pValueThrs, minFreq=minFreq)
plot(q1)
plot(q2)
cat('<a href="#top">Go to top</a>\n')
# DOWN
q3 = ggUpVolcano(kinaseStats[c("kinase","motif","countBg","totBg","countDown","totDown","freqDown","freqBg","pValueDown")]
,title=paste("kinase,",cond, "Down,", "n:",kinaseStats$totDown[1]), minPvalue=pValueThrs, minFreq=minFreq)
q4 = ggUpVolcano(motifStats[c("kinase","motif","countBg","totBg","countDown","totDown","freqDown","freqBg","pValueDown")]
,title=paste("motif,",cond, "Down,", "n:",motifStats$totDown[1]), minPvalue=pValueThrs, minFreq=minFreq)
plot(q3)
plot(q4)
cat('<a href="#top">Go to top</a>\n')
}
for(cond in names(motifStatsList) ){
motifsUp = motifsUpList[[cond]]
motifsDown = motifsDownList[[cond]]
# UP
par(mfrow=c(1,2))
DiffLogo::seqLogo(pwm = pcm2pfm(getAAFreq(motifsUp)),  alphabet = ASN)
mtext(side=3, text = paste(cond, "Up", "n:",length(motifsUp) ))
DiffLogo::seqLogo(pwm = pwmBg,   alphabet = ASN)
mtext(side=3, text = "BG"  )
par(mfrow=c(1,1))
diffLogoFromPwm(pwm2 = pcm2pfm(getAAFreq(motifsUp)), pwm1 = pwmBg,  alphabet = ASN)
mtext(side=3, text = paste(cond, "Up", "n:",length(motifsUp)))
cat('<a href="#top">Go to top</a>\n')
# DOWN
par(mfrow=c(1,2))
DiffLogo::seqLogo(pwm = pcm2pfm(getAAFreq(motifsDown)),  alphabet = ASN)
mtext(side=3, text = paste(cond, "Down", "n:",motifsDown %>% length ))
DiffLogo::seqLogo(pwm = pwmBg,   alphabet = ASN)
mtext(side=3, text = "BG"  )
par(mfrow=c(1,1))
diffLogoFromPwm(pwm2 = pcm2pfm(getAAFreq(motifsDown)), pwm1 = pwmBg,  alphabet = ASN)
mtext(side=3, text = paste(cond, "Down", "n:",motifsDown %>% length ))
cat('<a href="#top">Go to top</a>\n')
}
# dump all plots
plotlyWidgets
kable(kinaseMotif[,c("kinase","motif")],row.names = F)
for(cond in names(motifStatsList) ){
motifsUp = motifsUpList[[cond]]
motifsDown = motifsDownList[[cond]]
# UP
par(mfrow=c(1,2))
DiffLogo::seqLogo(pwm = pcm2pfm(getAAFreq(motifsUp)),  alphabet = ASN)
mtext(side=3, text = paste(cond, "Up", "n:",length(motifsUp) ))
DiffLogo::seqLogo(pwm = pwmBg,   alphabet = ASN)
mtext(side=3, text = "BG"  )
par(mfrow=c(1,1))
diffLogoFromPwm(pwm2 = pcm2pfm(getAAFreq(motifsUp)), pwm1 = pwmBg,  alphabet = ASN)
mtext(side=3, text = paste(cond, "Up", "n:",length(motifsUp)))
cat('<a href="#top">Go to top</a>\n')
# DOWN
par(mfrow=c(1,2))
DiffLogo::seqLogo(pwm = pcm2pfm(getAAFreq(motifsDown)),  alphabet = ASN)
mtext(side=3, text = paste(cond, "Down", "n:",motifsDown %>% length ))
DiffLogo::seqLogo(pwm = pwmBg,   alphabet = ASN)
mtext(side=3, text = "BG"  )
par(mfrow=c(1,1))
diffLogoFromPwm(pwm2 = pcm2pfm(getAAFreq(motifsDown)), pwm1 = pwmBg,  alphabet = ASN)
mtext(side=3, text = paste(cond, "Down", "n:",motifsDown %>% length ))
cat('<a href="#top">Go to top</a>\n')
}
cat("###",cond, "Up")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(SafeQuant)
library(affy)
library(motifStack)
library(dplyr)
library(DiffLogo)
library(ggplot2)
library(ggrepel)
library(plotly)
library(knitr)
data("kinaseMotif")
source("~/dev/R/workspace/SafeQuant/R/Graphics.R")
source("~/dev/R/workspace/SafeQuant/R/IdentificationAnalysis.R")
############### methods ############################################################
ggUpVolcano = function(ggDf, title=title, minPvalue=0.05, minFreq=0.1){
# strip up/down column label
names(ggDf) %<>% gsub("(Up)|(Down)","",.)
# add pseudo count for display
pC = 0.5
ggDf$log2freqRatio = with(ggDf,log2((freq+pC)/(freqBg+pC)))
p =  ggplot(ggDf,aes(x = log2freqRatio,y=-log10(pValue)
,label=motif
,label2=pValue
,label4=count
,label3=kinase
,color=freq))
p = p + geom_point()
p = p + labs(list(x="log2 Freq Ratio", y="-log10 pValue", title=title ))
p = p + theme_bw()
p = p + scale_colour_gradient(low = "white", high="darkblue", name="matching freq")
p = p + theme(text = element_text(size=15)
, axis.text.x = element_text(angle=0, hjust=1)
, legend.position="right"
,legend.direction="vertical")
# pvalue thrs
p =  p + geom_abline(intercept = -log10(pValueThrs),slope=0, lty=2)
# thrs
#p =  p + geom_abline(intercept = 2,slope=0, lty=2)
# disp kinase or motif
dfLab = subset(ggDf, (pValue < minPvalue) & (freq > minFreq))
if(nrow(dfLab) > 0){
if(is.na(ggDf$motif[1])){
p = p + geom_text_repel(data= dfLab
,aes(x =log2freqRatio,y=-log10(pValue),label=kinase %>% gsub("(substrate)|(motif)|(kinase)","",.)  %>% gsub(" {2,}"," ",.)))
}else{
p = p + geom_text_repel(data=dfLab,aes(x = log2freqRatio, y=-log10(pValue),label=motif))
}
}
return(p)
}
getPropTestPValue = function(stats){
# calculate chi-sqaure p-values using protp.test
pValue =  lapply(1:nrow(stats),function(i){
c = stats[i,1:2] %>% unlist
totC = stats[1,3:4] %>% unlist
if(sum(c) == 0 ){
return(1)
}else{
suppressWarnings(return(prop.test(c , totC, alternative="less"  )$p.value))
}
}) %>% unlist
# adjust for multiple testing
#return(p.adjust(pValue, method="bonferroni"))
return(pValue)
}
getAAFreq = function(motif, targetResidues = c("S","T","Y") ){
# discard short motifs
nc = nchar(motif)
motif = motif[nc == max(nc,na.rm=T)]
motifMatrix = do.call(rbind, strsplit(motif,""))
motifMatrix = motifMatrix[motifMatrix[,round((nchar(motif[1])+1)/2)] %in% targetResidues,]
aas = c("A","C","D","E","F","G","H","I","K","L","M","N","P","Q","R","S","T","V","W","Y")
aaFreq =  data.frame()
for(pos in 1:ncol(motifMatrix)){
aaFreq = rbind(aaFreq,table(motifMatrix[,pos])[aas])
}
names(aaFreq) = aas
aaFreq[is.na(aaFreq)] = 0
aaFreq = t(aaFreq)
return(aaFreq)
}
############### methods ############################################################
### ex79 full
if(F){
df = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/ex79-PhosphoQuant.csv")
labels = c("Diploid", "Tetraploid", "Aneuploid-1", "Aneuploid-2", "Aneuploid-3", "Aneuploid-4")
resDir = "~/dev/R/workspace/CristinaPhospho/data/motifsEtc/out/exp79/full/"
}
### ex79 inclusion list
if(F){
inclusionList = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/InclusionList.csv")[,1]
df = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/ex79-PhosphoQuant.csv")
labels = c("Diploid", "Tetraploid", "Aneuploid-1", "Aneuploid-2", "Aneuploid-3", "Aneuploid-4")
resDir = "~/dev/R/workspace/CristinaPhospho/data/motifsEtc/out/exp79/inclusionList/"
# keep inclusion list only
df = subset(df, X %in% inclusionList)
}
### ex93 full
if(F){
df = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/exp93-PhosphoQuant.csv")
labels = c("Diploid", "Tetraploid", "Trisomic-1", "Trisomic-2")
resDir = "~/dev/R/workspace/CristinaPhospho/data/motifsEtc/out/exp93/full/"
}
### ex93 inclusion list
if(T){
inclusionList = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/InclusionList.csv")[,1]
df = read.csv("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/exp93-PhosphoQuant.csv")
labels = c("Diploid", "Tetraploid", "Trisomic-1", "Trisomic-2")
resDir = "~/dev/R/workspace/CristinaPhospho/data/motifsEtc/out/exp93/inclusionList/"
# keep inclusion list only
df = subset(df, X %in% inclusionList)
}
# create index
rownames(df) = paste0(df$peptide,":",df$ptm %>% gsub(" ","",.) )
ratios = subset(df,select = grepl("ratio",names(df)) )
names(ratios) = labels[2:length(labels)]
pValues = subset(df,select = grepl("pValue",names(df)) )
names(pValues) = labels[2:length(labels)]
qValues = subset(df,select = grepl("qValue",names(df)) )
names(qValues) = labels[2:length(labels)]
#### background set
allMotifs = df$motifX %>% gsub("(\\*)|(\\,.*)","",.)
#allMotifs = allMotifs[nchar(allMotifs) == max(nchar(allMotifs), na.rm=T)]
# VEVNTNpSGEIIHK -> VEVNTNSGEIIHK
allMotifsFormatted =  gsub("(.{6})([STY].{6})",paste0("\\1","p","\\2"),allMotifs)
if(F){
pwmBg = pcm2pfm(getAAFreq(allMotifs))
kinaseFreqBg = getKinaseFreq(allMotifsFormatted)
motifFreqBg = getMotifFreq(allMotifsFormatted)
nbBgPeptides = length(allMotifsFormatted)
save(kinaseFreqBg,motifFreqBg,pwmBg,nbBgPeptides,file="~/dev/R/workspace/CristinaPhospho/data/motifsEtc/kinaseMotifFreqBg.RData")
}
load("~/dev/R/workspace/CristinaPhospho/data/motifsEtc/kinaseMotifFreqBg.RData")
qValueCutoff = 0.05
minFreq = 0.1
pValueThrs = 0.05
maxTargetPeptides = 300
kinaseStatsUp = kinaseStatsUp[order(kinaseStatsUp$pValue),]
kinaseStatsUp = kinaseStatsUp[order(kinaseStatsUp$pValue),]
source('~/dev/R/workspace/QuickModPP/qmResultsPP_HEK3.R')
source('~/dev/R/workspace/QuickModPP/qmResultsPP_HEK3.R')
source('~/dev/R/workspace/QuickModPP/qmResultsPP_HEK3.R')
source('~/dev/R/workspace/RolandPhospho/R/mFuzzClustering.R')
source('~/dev/R/workspace/RolandPhospho/R/mFuzzClustering.R')
mfuzzInputMatrix
eset
eset <- standardise(eset) ### STANDARDISE
### estimate using Schwammle and Jensen method
m <- mestimate(eset)
### cluster
fuzzification <- mfuzz(eset,c=nbClusters,m=m)
### time course plots
colo <- "fancy"
xlab <- "Time (min)"
ylab <- "Norm Log Ratio"
ylim <- c(-1.5,1.5)
barplot(apply((fuzzification$membership == apply(fuzzification$membership,1,max)) & (fuzzification$membership > min.mem),2,sum),names=1:nbClusters ,main="Cluster Sizes", ylab="# peptides")
### PLOT CLUSTERS WITH TREND LINE
par(mfrow=c(3,3))
for(clusterNb in 1:nbClusters){
mfuzz.plot2(eset,cl=fuzzification, mfrow=NA, min.mem=min.mem, x11 = FALSE, ylim=ylim, single=clusterNb, ylab=ylab, xlab=xlab, timeLabels=timeLabels,colo=colo)
#mfuzz.plot2(eset,cl=fuzzification, mfrow=NA, min.mem=min.mem, x11 = FALSE,single=clusterNb)
lines(1:length(timeLabels),fuzzification$centers[clusterNb,], lwd=2)
}
mfuzzColorBar(col=colo,main="Membership",cex.main=1)
source('~/dev/R/workspace/RolandPhospho/R/mFuzzClustering.R', echo=TRUE)
source('~/dev/R/workspace/RolandPhospho/R/mFuzzClustering.R')
source('~/dev/R/workspace/RolandPhospho/R/mFuzzClustering.R')
source('~/dev/R/workspace/RolandPhospho/R/mFuzzClustering.R')
source('~/dev/R/workspace/RolandPhospho/R/mFuzzClustering.R')
source('~/dev/R/workspace/RolandPhospho/R/mFuzzClustering.R')
